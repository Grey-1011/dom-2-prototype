{"version":3,"sources":["main.js"],"names":["$","addClass"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEAA,EAAE,OAAF,EAAWC,QAAX,CAAoB,OAApB","file":"main.662a5945.map","sourceRoot":"..\\src","sourcesContent":["// const api = jQuery('.test') // 不返回元素们，返回api对象\r\n// api.addClass('red').addClass('blue')// 遍历所有刚才获取的元素，添加 .red\r\n// 后面又写的 .addClass('blue') 因为返回的是api --return api,所以可以继续操作， 这叫链式操作\r\n// 变量名api随便，不写也可以 \r\n// jQuery对象，是jQuery构造出来的对象，也就是api\r\n\r\n// jQuery('.test') //返回值并不是元素，而是一个api对象\r\n//     .addClass('red')\r\n//     .addClass('blue')\r\n//     .addClass('green')\r\n\r\n// jQuery('.test').find('.child')\r\n// .addClass('red')\r\n// .addClass('blue')\r\n// .addClass('green')\r\n// .end()\r\n// .addClass('yellow')\r\n\r\n// jQuery('.test').find('.child').each((div)=>console.log(div))\r\n\r\n// const x = jQuery('.test').parent()\r\n// x.print()\r\n \r\n// const x = jQuery('.test').children()\r\n// x.print()\r\n\r\n$('.test').addClass('green')"]}